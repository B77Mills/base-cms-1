import { getAsArray } from "@parameter1/base-cms-object-path";
import { isFunction } from '@parameter1/base-cms-utils';
import loadWebsiteSections from "./load-website-sections";

$ const { $markoWebSearch, apollo, i18n } = out.global;
$ const filterKey = "assignedToWebsiteSectionIds";
$ const title = isFn(i18n) ? i18n("Website Sections") : "Website Sections";

<marko-web-resolve|{ resolved }| promise=loadWebsiteSections({
  $markoWebSearch,
  apolloBaseCMS: apollo,
})>
  $ const { selectedSection, configuredSections } = resolved;
  <marko-web-search-filter-block filter-key=filterKey items=configuredSections>
    <@title value=title />
    <@item|{ node, blockName }|>
      <if(selectedSection && selectedSection.hierarchyMap.has(node.id))>
        <!-- loop through hierarchy to create "breadcrumb" links -->
        $ const { hierarchy } = selectedSection;
        <marko-web-element block-name=blockName name="item" modifiers=["breadcrumbs"]>
          <for|section| of=hierarchy>
            <marko-web-search-set-filter-value-link name=filterKey value=section.id reset-class=`${blockName}__clear-item`>
              ${section.name}
            </marko-web-search-set-filter-value-link>
          </for>
        </marko-web-element>

        <!-- then display children -->
        $ const children = getAsArray(selectedSection, "children.edges").map(edge => edge.node);
        <marko-web-search-filter-block filter-key=filterKey items=children modifiers=["children"]>
          <@item label-path="name" />
        </marko-web-search-filter-block>
      </if>
      <else>
        <!-- display the "normal" section -->
        <marko-web-search-set-filter-value-link name=filterKey value=node.id>
          ${node.name}
        </marko-web-search-set-filter-value-link>
      </else>
    </@item>
  </marko-web-search-filter-block>
</marko-web-resolve>
