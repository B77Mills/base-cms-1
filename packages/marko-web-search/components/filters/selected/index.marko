import gql from "graphql-tag";
import { get, getAsArray, getAsObject } from "@parameter1/base-cms-object-path";
import { isFunction } from '@parameter1/base-cms-utils';

$ const { $markoWebSearch: search, i18n } = out.global;
$ const blockName = "marko-web-search-selected-filters";
$ const { contentTypes, assignedToWebsiteSectionIds } = search.input;
$ const { contentTypeObjectMap } = search.config;
$ const i18nIsFunction = isFunction(i18n);
$ const typePrefix = i18nIsFunction ? i18n("Type") : "Type";
$ const typeLabel = i18nIsFunction? i18n(contentType.label) : contentType.label;
$ const sectionPrefix = i18nIsFunction? i18n("Section") : "Section";

$ const queryFragment = gql`
  fragment MarkoWebSearchSelectedWebsiteSectionFragment on WebsiteSection {
    id
    fullName
  }
`;

$ const hasFilters = !search.isDefaultInputValueFor("contentTypes") || assignedToWebsiteSectionIds.length;

<if(hasFilters)>
  <marko-web-block name=blockName>
    <if(!search.isDefaultInputValueFor("contentTypes"))>
      <for|contentTypeId| of=contentTypes>
        $ const contentType = contentTypeObjectMap.get(contentTypeId);
        <marko-web-search-selected-filter
          prefix=typePrefix
          filter-key="contentTypes"
          label=typeLabel
          />
      </for>
    </if>
    <if(assignedToWebsiteSectionIds.length)>
      <marko-web-query-website-sections|{ nodes }|
        include-ids=assignedToWebsiteSectionIds
        limit=assignedToWebsiteSectionIds.length
        query-fragment=queryFragment
      >
        <for|section| of=nodes>
          <marko-web-search-selected-filter
            prefix=sectionPrefix
            filter-key="assignedToWebsiteSectionIds"
            label=section.fullName
          />
        </for>
      </marko-web-query-website-sections>
    </if>
  </marko-web-block>
</if>
