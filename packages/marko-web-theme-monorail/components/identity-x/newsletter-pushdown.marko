import { buildImgixUrl } from "@parameter1/base-cms-image";
import { get, getAsObject } from "@parameter1/base-cms-object-path";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";

$ const { site, config, req } = out.global;
$ const { identityX } = req;
$ const additionalEventData = {
  ...defaultValue(input.additionalEventData, {}),
  newsletterSignupType: "pushdown",
};
$ const buttonLabels = defaultValue(input.buttonLabels, { continue: "Sign Up" })
$ const loginEmailPlaceholder = defaultValue(input.loginEmailPlaceholder, "example@gmail.com");
$ const source = defaultValue(input.source, "newsletterSignup");
$ const configName = defaultValue(input.configName, "pushdown");

$ const {
  name,
  description,
  withUserName,
  withUserDescription,
  imagePath,
  disabled,
} = site.getAsObject(`newsletter.${configName}`);
$ const lang = site.config.lang || "en";
$ const { initiallyExpanded } = getAsObject(out.global, "newsletterState");
$ const imageSrc = imagePath ? buildImgixUrl(`https://${config.website("imageHost")}/${imagePath}`, { w: 280, auto: "format,compress" }) : null;
$ const imageSrcset = imageSrc ? `${imageSrc}&dpr=2 2x` : null;

<if(Boolean(identityX))>
  <marko-web-identity-x-context|{ user, isEnabled, application }|>
    <if(name && description)>
      <marko-web-browser-component
        name="IdentityXNewsletterFormPushdown"
        props={
          siteName: config.website("name"),
          name: (user && withUserName) ? withUserName : name,
          description: (user && withUserDescription) ? withUserDescription : description,
          disabled,
          imageSrc,
          imageSrcset,
          initiallyExpanded,
          lang,
          additionalEventData,
          source,
          type: "pushdown",
          activeUser: user,
          endpoints: identityX.config.getEndpoints(),
          buttonLabels,
          redirect: input.redirect,
          loginEmailPlaceholder,
          loginEmailLabel: input.loginEmailLabel,
          consentPolicy: get(application, "organization.consentPolicy"),
          emailConsentRequest: get(application, "organization.emailConsentRequest"),
          regionalConsentPolicies: get(application, "organization.regionalConsentPolicies"),
          appContextId: identityX.config.get("appContextId"),
        }
        ssr=true
      />
    </if>
  </marko-web-identity-x-context>
</if>
