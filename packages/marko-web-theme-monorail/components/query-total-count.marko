import gql from "graphql-tag";
import { getAsObject } from "@parameter1/base-cms-object-path";

$ const date = v => (v instanceof Date ? v.valueOf() : v);
$ const { apollo } = out.global;
$ const validateParams = (params) => {
  // Ref package web-common/src/block-loader/website-scheduled-content.js
  // If endingAfter set ending to the following and remove invalid endingAfter param
  if (params.endingAfter) {
    params.ending = { after: date(params.endingAfter) };
    delete params.endingAfter;
  }
  return params;
};

$ const params = validateParams({ ...getAsObject(input, "params") });
$ delete params.queryFragment;
$ delete params.sectionFragment;

$ const optionsMap = {
  "website-scheduled-content": {
    query: gql`
      query WebsiteScheduledContentCount($input: WebsiteScheduledContentQueryInput!) {
        result: websiteScheduledContent(input: $input) {
          totalCount
        }
      }
    `,
    variables: { input: params },
  },
  "website-optioned-content": {
    query: gql`
      query WebsiteScheduledContentCount($input: WebsiteScheduledContentQueryInput!) {
        result: websiteScheduledContent(input: $input) {
          totalCount
        }
      }
    `,
    variables: { input: params },
  },
  "all-author-content": {
    query: gql`
      query AllAuthorContentCount($input: AllAuthorContentQueryInput!) {
        result: allAuthorContent(input: $input) {
          totalCount
        }
      }
    `,
    variables: { input: params },
  },
  "all-company-content": {
    query: gql`
      query AllCompanyContentCount($input: AllCompanyContentQueryInput!) {
        result: allCompanyContent(input: $input) {
          totalCount
        }
      }
    `,
    variables: { input: params },
  },
  "all-published-content": {
    query: gql`
      query AllPublishedContentCount($input: AllPublishedContentQueryInput!) {
        result: allPublishedContent(input: $input) {
          totalCount
        }
      }
    `,
    variables: { input: params },
  },
  "magazine-active-issues": {
    query: gql`
      query MagazineActiveIssuesCount($input: MagazineActiveIssuesQueryInput!) {
        result: magazineActiveIssues(input: $input) {
          totalCount
        }
      }
    `,
    variables: { input: params },
  },
  "magazine-scheduled-content": {
    query: gql`
      query MagazineScheduledContent($input: MagazineScheduledContentQueryInput!) {
        result: magazineScheduledContent(input: $input) {
          totalCount
        }
      }
    `,
    variables: { input: params },
  }
};
$ const options = optionsMap[input.name];
$ if (!options) throw new Error(`No query options have been defined for ${input.name}`);

<marko-web-resolve|{ resolved }| promise=apollo.query(options)>
  $ const { data } = resolved;
  <${input.renderBody} total-count=data.result.totalCount />
</marko-web-resolve>
