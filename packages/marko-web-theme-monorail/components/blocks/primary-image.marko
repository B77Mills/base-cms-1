import { buildImgixUrl, getRelativeCropRectangleHeight } from "@parameter1/base-cms-image";
import { getAsObject, getAsArray, get } from "@parameter1/base-cms-object-path";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";

$ const blockName = "primary-image";
$ const image = getAsObject(input, "obj");
$ const hasImage = Boolean(image.src);

$ const forceDisplay = defaultValue(input.forceDisplay);
$ let display = forceDisplay || image.primaryImageDisplay || "center";
$ const { isLogo } = image;

$ const withCaption = defaultValue(input.withCaption, true);
$ const withCredit = defaultValue(input.withCredit, true);
$ const withDisplayName = defaultValue(input.withDisplayName, true);

$ const fluidWidth = defaultValue(input.fluidWidth, 880);
$ const alignedWidth = defaultValue(input.alignedWidth, 300);
$ const shouldFill = defaultValue(input.shouldFill, false);
$ const lazyload = defaultValue(input.lazyload, false);
$ const initialImageWidth = defaultValue(input.initialImageWidth, 350);

$ if (display === "center" && isLogo) {
  // force logos to the right when set to center
  display = "right";
}

$ const modifiers = [...getAsArray(input, "modifiers")];
$ if (["left", "right"].includes(display)) {
  modifiers.push("aligned");
}
$ modifiers.push(`aligned-${display}`);

$ const maxWidth = input.maxWidth || 880;
$ const fluid = !["left", "right"].includes(display);
$ if (fluid) modifiers.push("fluid");

$ const imageOptions = {};
$ if (fluid) {
  imageOptions.w = fluidWidth;
  if (shouldFill && !isLogo) {
    imageOptions.fit = "fillmax";
    imageOptions.fill = "blur";
  }
} else {
  imageOptions.w = alignedWidth;
};

$ const src = buildImgixUrl(image.src, imageOptions);
$ const srcset = [src, `${buildImgixUrl(src, { dpr: 2 })} 2x`];
$ const srcMid = buildImgixUrl(src, { w: 700 });
$ const srcsetMid = [srcMid, `${buildImgixUrl(srcMid, { dpr: 2 })} 2x`];
$ const srcMin = buildImgixUrl(src, { w: 400 });
$ const srcsetMin = [srcMin, `${buildImgixUrl(srcMin, { dpr: 2 })} 2x`];
$ const sources = [];
$ if (fluid) {
  sources.push(
    {
      srcset: srcset,
      media: "(min-width: 900px)",
      width: maxWidth,
      height: getRelativeCropRectangleHeight({ width: maxWidth, cropRectangle: image.cropRectangle }),
    },
    {
      srcset: srcsetMid,
      media: "(min-width: 576px)",
      width: 700,
      height: getRelativeCropRectangleHeight({ width: 700, cropRectangle: image.cropRectanglemage }),
    }
  );
} else {
  const alignedSrc = buildImgixUrl(src, { w: alignedWidth });
  const alignedSrcset = [alignedSrc, `${buildImgixUrl(alignedSrc, { dpr: 2 })} 2x`];
  sources.push(
    {
      srcset: alignedSrcset,
      media: "(min-width: 576px)",
      width: alignedWidth,
      height: getRelativeCropRectangleHeight({ width: alignedWidth, cropRectangle: image.cropRectangle }),
    }
  );
};

$ const imageAttrs = {};
$ if (image.id) imageAttrs["data-image-id"] = image.id;

$ const height = getRelativeCropRectangleHeight({ width: initialImageWidth, cropRectangle: image.cropRectangle });
$ if (height) {
  imageAttrs.width = initialImageWidth;
  imageAttrs.height = height;
};

<if(hasImage && display !== "none")>

  <marko-web-block
    name=blockName
    modifiers=modifiers
  >
    <if(withDisplayName)>
      <marko-web-image-display-name block-name=blockName obj=image />
    </if>
    <div class=`${blockName}__wrapper`>
      <marko-web-picture>
        <for|s| of=sources>
          <@source srcset=s.srcset media=s.media width=s.width height=s.height />
        </for>
        <@image
          src=srcMin
          srcset=srcsetMin
          class=[`${blockName}__image`]
          alt=image.alt
          attrs=imageAttrs
          lazyload=lazyload
        />
      </marko-web-picture>
    </div>

    <if(withCaption)>
      <marko-web-image-caption block-name=blockName obj=image />
    </if>
    <if(withCredit)>
      <marko-web-image-credit block-name=blockName obj=image />
    </if>
  </marko-web-block>
</if>
