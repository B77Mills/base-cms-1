import { getAsObject, getAsArray, get } from "@parameter1/base-cms-object-path";
import { buildImgixUrl } from "@parameter1/base-cms-image";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";

$ const { site, i18n } = out.global;

$ const content = getAsObject(input, "node");
$ const { company } = content;
$ const contentType = defaultValue(content.type, 'article');
$ const modifiers = [...getAsArray(input, "modifiers"), `${contentType}-content-type`]
$ const withCompany = (company) ? defaultValue(input.withCompany, true) : false;
$ const primaryImage = getAsObject(content, "primaryImage");
$ const primarySection = getAsObject(content, "primarySection");
$ const containerAttrs = getAsObject(input, "containerAttrs");
$ const linkAttrs = getAsObject(input, "linkAttrs");

$ const withBody = defaultValue(input.withBody, false);
$ const withAddress = defaultValue(input.withAddress, (content.type === "company"));
$ const withDates = defaultValue(input.withDates, true);
$ const withSpeakers = defaultValue(input.withSpeakers, true);
$ const dateFormat = defaultValue(input.dateFormat, "MMMM D, YYYY");
$ const multiDateFormats = input.multiDateFormats;

$ const isUpcoming = content.startDate > Date.now();
$ if (isUpcoming) modifiers.push("upcoming");
$ const withSection = defaultValue(input.withSection, true);
$ const withTeaser = defaultValue(input.withTeaser, true);
$ const displayImage = defaultValue(input.displayImage, true);
$ const lazyload = defaultValue(input.lazyload, true);
// linkOffsite is an object like the following:
/**
  {
    webinar: 'linkUrl',
    event: 'website'
  }
  Keys are content types (all lowercase), values are the field to use when available on that type.
**/
$ const linkOffsite = getAsObject(site, "config.linkOffsite");
$ const linkField = get(linkOffsite, contentType);
$ const linkTarget = linkField && get(content, linkField) ? defaultValue(get(linkOffsite, "target"), "") : "";

$ const imageOptions = {
  w: 250,
  h: 167,
  fit: "crop",
  // account for and apply fill & fill color of transparent if fit is fill.
  ...(input.imageOptions && { ...getAsObject(input, "imageOptions") }),
};
$ const mobileImageOptions = {
  ...imageOptions,
  w: 112,
  h: 112,
  ...(input.mobileImageOptions && { ...getAsObject(input, "mobileImageOptions") }),
}

$ const blockName = "section-feed-content-node";

<marko-web-block name=blockName modifiers=modifiers attrs=containerAttrs>
  <marko-web-element block-name=blockName name="contents">
    <marko-web-element block-name=blockName name="body">
      <if(input.sponsoredBy)>
        <marko-web-element block-name=blockName name="sponsored-by">
          ${i18n("Sponsored By")} ${input.sponsoredBy}
        </marko-web-element>
      </if>
      <else-if(withSection)>
        <section-sponsor block-name=blockName section=primarySection labels=content.labels />
      </else-if>
      <marko-web-content-short-name
        tag="h5"
        block-name=blockName
        obj=content
        link={ field: linkField, target: linkTarget, attrs: linkAttrs }
      />
      <if(withCompany)>
        <marko-web-content-name class=`${blockName}__content-company` obj=content.company link=true />
      </if>
      <if(withTeaser)>
        <marko-web-content-teaser
          block-name=blockName
          obj=content
          link={ field: linkField, target: linkTarget, attrs: linkAttrs }
        />
        <if(input.teaserCTA)>
          <marko-web-link
            class="teaser-link"
            href=content.siteContext.path
            title=content.shortName
          >
            ${input.teaserCTA}
          </marko-web-link>
        </if>
      </if>
      <if(withBody)>
        <marko-web-content-body
          block-name=blockName
          obj=content
        />
      </if>
      <if(withAddress && (content.address1 || content.address2 || content.cityStateZip))>
        <marko-web-block name=blockName modifiers=["contact-info"] >
          <marko-web-content-address1 block-name=blockName obj=content />
          <marko-web-content-address2 block-name=blockName obj=content />
          <marko-web-content-city-state-zip block-name=blockName obj=content />
        </marko-web-block>
      </if>
      <else-if(withDates && input.date)>
        <${input.date} />
      </else-if>
      <else-if(withDates && multiDateFormats && (content.startDate || content.endDate))>
        <marko-web-element block-name=blockName name="multidates" modifiers=modifiers >
          <for|dateObj| of=multiDateFormats>
            $ const dateFormat =  dateObj.dateFormat || dateFormat;
            $ const timezone = dateObj.timezone  || "America/Chicago";
            <div class=`${blockName}__content-event-dates`>
              <marko-web-content-start-date tag="span" block-name=blockName obj=content format=dateFormat timezone=timezone />
              <marko-web-content-end-date tag="span" block-name=blockName obj=content format=dateFormat timezone=timezone />
            </div>
          </for>
        </marko-web-element>
      </else-if>
      <else-if(withDates && (content.startDate || content.endDate))>
        <div class=`${blockName}__content-event-dates`>
          <marko-web-content-start-date tag="span" block-name=blockName obj=content format=dateFormat />
          <marko-web-content-end-date tag="span" block-name=blockName obj=content format=dateFormat />
        </div>
      </else-if>
      <else-if(withDates && multiDateFormats)>
        <marko-web-element block-name=blockName name="multidates" modifiers=modifiers >
          <for|dateObj| of=multiDateFormats>
            $ const dateFormat = dateObj.dateFormat || dateFormat;
            $ const timezone = dateObj.timezone  || "America/Chicago";
            <marko-web-content-published
              block-name=blockName
              obj=content
              format=dateFormat
              timezone=timezone
            />
          </for>
        </marko-web-element>
      </else-if>
      <else-if(withDates)>
        <marko-web-content-published
          block-name=blockName
          obj=content
          format=dateFormat
        />
      </else-if>

      <if(withSpeakers && getAsArray(content, 'speakers.edges').length && content.type === 'webinar')>
        <marko-web-element block-name=blockName name="content-speakers">
          <marko-web-obj-nodes|{ node, index, length }| type="content" block-name=blockName obj=content field="speakers" tag="span">
            <if(index === 0)>
              <marko-web-element tag="span" block-name=blockName name="content-speakers-label">
                <if(length === 1)>Speaker: </if>
                <else>Speakers: </else>
              </marko-web-element>
            </if>
            <marko-web-content-name tag="span" block-name=blockName obj=node link=false />
            <span>, </span>
            <marko-web-content-title tag="span" block-name=blockName obj=node />
            <if(index + 1 !== length)>; </if>
          </marko-web-obj-nodes>
        </marko-web-element>
      </if>

      <marko-web-element block-name=blockName name="content-sponsors">
        <marko-web-obj-nodes|{ node, index, length }| type="content" block-name=blockName obj=content field="sponsors" tag="span">
          <if(index === 0)>
            <marko-web-element tag="span" block-name=blockName name="content-sponsors-label">Sponsored By: </marko-web-element>
          </if>
          <marko-web-content-name tag="span" block-name=blockName obj=node link=true />
          <if(index + 1 !== length)>, </if>
        </marko-web-obj-nodes>
      </marko-web-element>
      <!-- Force display of CTA button on webinars -->
      <if(withDates && content.type === "webinar")>
        $ const linkUrl = (content.linkUrl) ? content.linkUrl : get(content, "siteContext.path");
        $ const target = (content.linkUrl) ? "_blank" : "_self";
        $ const obj = { ...content, linkUrl };
        <theme-content-link-url
          obj=obj
          label=(isUpcoming ? `${i18n("Register for Webinar")}` : `${i18n("View Webinar")}`)
          target=target
        />
      </if>
    </marko-web-element>
  </marko-web-element>
  <if(displayImage && primaryImage.src)>
    <marko-web-element block-name=blockName name="image-wrapper">
      $ const isLogo = content.type === "company" ? true : get(primaryImage, "isLogo");
      $ const src = buildImgixUrl(primaryImage.src, imageOptions, null, isLogo);
      $ const srcset = [src, `${buildImgixUrl(src, { dpr: 2 })} 2x`];

      $ const srcMobile = buildImgixUrl(primaryImage.src, mobileImageOptions, null, isLogo);
      $ const srcsetMobile = [srcMobile, `${buildImgixUrl(srcMobile, { dpr: 2 })} 2x`];
      $ const link = linkField && get(content, linkField) ? get(content, linkField) : get(content, "siteContext.path");
      <marko-web-picture>
        <@link href=link target=linkTarget attrs=linkAttrs />
        <@source srcset=srcset media="(min-width: 768px)" width=250 height=167 />
        <@image
          src=srcMobile
          srcset=srcsetMobile
          class=[`${blockName}__image`]
          alt=primaryImage.alt
          lazyload=lazyload
          attrs={ width: "112", height: "112" }
        />
      </marko-web-picture>
    </marko-web-element>
  </if>
</marko-web-block>
