
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import { get } from "@parameter1/base-cms-object-path";

$ const { req: { identityX } } = out.global;
$ const { content, formId } = input;
$ const form = identityX.config.getAsObject(`forms.${formId}`);
$ const additionalEventData = defaultValue(input.additionalEventData, {});
$ const ctaPrefix = `To download "${content.name}"`
$ const callToAction = defaultValue(input.callToAction, `${ctaPrefix}, please fill out the form below.`);
$ const callToActionLoggedOut = defaultValue(input.callToAction, `${ctaPrefix}, please enter your email address below. You will recieve an email containing a verification link.`);
$ const buttonLabel = defaultValue(input.buttonLabel, "Submit & Download");
$ const title = defaultValue(input.title, "Complete the form to download this content");

<if(identityX && form)>
  <div class="content-download-idx__wrapper">
    <marko-web-identity-x-context|{ user, isEnabled, application }|>
      $ const props = {
        // Download form props
        content: content,
        title: form.title,
        fieldRows: form.fieldRows,
        loginSource: "contentDownload",
        title: title,
        callToAction: callToAction,
        callToActionLoggedOut: callToActionLoggedOut,

        // Login props
        activeUser: user,
        additionalEventData: additionalEventData,
        appContextId: identityX.config.get("appContextId"),
        buttonLabel: buttonLabel,
        defaultCountryCode: identityX.config.get("defaultCountryCode"),
        defaultFieldLabels: identityX.config.get("defaultFieldLabels"),
        enableChangeEmail: identityX.config.get("enableChangeEmail"),
        endpoints: identityX.config.getEndpoints(),
        requiredCreateFields: identityX.config.getRequiredCreateFields(),

        // Consent
        consentPolicy: get(application, "organization.consentPolicy"),
        consentPolicyEnabled: defaultValue(input.consentPolicyEnabled, true),
        emailConsentRequest: get(application, "organization.emailConsentRequest"),
        emailConsentRequestEnabled: defaultValue(input.emailConsentRequest, true),
        regionalConsentPolicies: get(application, "organization.regionalConsentPolicies"),
      };
      <marko-web-browser-component name="IdentityXDownload" props=props />
    </marko-web-identity-x-context>
  </div>
</if>
<else>
  <h3>Couldn"t load form <code>${formId}</code>!</h3>
</else>
