import gql from "graphql-tag";
import { get } from "@parameter1/base-cms-object-path";
import { warn, isFunction } from "@parameter1/base-cms-utils";
import { extractFragmentData } from "@parameter1/base-cms-web-common/src/utils";
import defaultBuildStructuredData from "./google-structured-data/content";

<!-- @todo This data should generated and saved to the content object as flat data, so no relationships are required. -->

$ const { config } = out.global;
$ const { id, structuredDataQueryFragment } = input;
$ const { spreadFragmentName, processedFragment } = extractFragmentData(structuredDataQueryFragment);
$ const queryFragment = gql`
fragment ContentPageMetadataFragment on Content {
  id
  type
  siteContext {
    url
    path
    canonicalUrl
    noIndex
  }
  published
  updated
  metadata {
    title
    description
    publishedDate
    updatedDate
    expiresDate
    image {
      id
      src(input: { options: { auto: "format,compress", w: "1200", fit: "max", q: 70 } })
    }
  }
  userRegistration {
    isCurrentlyRequired
  }
  ... on ContentVideo {
    embedSrc
    transcript
  }
  primarySite {
    id
  }
  ... on ContentPodcast {
    fileSrc
    fileName
    transcript
  }
  ... on ContentWebinar {
    transcript
  }
  ... on Authorable {
    authors {
      edges {
        node {
          id
          name
        }
      }
    }
  }
  ... on Addressable {
    address1
    address2
    city
    state
    zip
    country
  }
  ... on Contactable {
    phone
    tollfree
    fax
    website
    title
    mobile
    email: publicEmail
  }
  images(input:{ pagination: { limit: 0 }, sort: { order: values } }) {
    edges {
      node {
        id
        src(input: { options: { auto: "format,compress", w: "1200", fit: "max", q: 70 } })
      }
    }
  }
  ${spreadFragmentName}
}
${processedFragment}
`;

$ const buildStructuredData = isFunction(input.buildStructuredData) ? input.buildStructuredData : defaultBuildStructuredData;
$ const defaultFn = ({ content }) => get(content, 'userRegistration.isCurrentlyRequired', false);
$ const { contentGatingHandler: globalContentGatingHandler } = out.global;
$ const contentGatingHandler = isFunction(globalContentGatingHandler) ? globalContentGatingHandler : defaultFn;

<if(id)>
  <marko-web-query|{ node }| name="content" params={ id, queryFragment }>
    $ const metadata = {
      type: node.type,
      title: get(node, "metadata.title"),
      description: get(node, "metadata.description"),
      canonicalPath: get(node, "siteContext.path"),
      canonicalUrl: get(node, "siteContext.canonicalUrl"),
      noIndex: get(node, "siteContext.noIndex") || config.website("id") !== get(node, "primarySite.id"),
      imageSrc: get(node, "metadata.image.src"),
    };
    $ const publishedDate = get(node, "metadata.publishedDate");
    $ const updatedDate = get(node, "metadata.updatedDate");
    $ const expiresDate = get(node, "metadata.expiresDate");

    <common ...metadata />
    <if(node.type === "video")>
      <meta property="og:type" content="video.other" />
      <if(publishedDate)>
        <meta property="video:release_date" content=publishedDate />
      </if>
    </if>
    <else>
      <meta property="og:type" content="article" />
      <if(publishedDate)>
        <meta property="article:published_time" content=publishedDate />
      </if>
      <if(updatedDate)>
        <meta property="article:modified_time" content=updatedDate />
      </if>
      <if(expiresDate)>
        <meta property="article:expiration_time" content=expiresDate />
      </if>
    </else>

    $ const structuredData = buildStructuredData(node, contentGatingHandler);
    <if(structuredData)>
      <script type="application/ld+json">
        ${structuredData}
      </script>
    </if>

    <@when-empty>
      $ warn(`Unable to create content metadata: no content found for ${id}.`);
    </@when-empty>
  </marko-web-query>
</if>
<else>
  $ warn('Unable to create content metadata: no content id was provided.');
</else>
