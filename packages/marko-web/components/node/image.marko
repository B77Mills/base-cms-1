import { buildImgixUrl, getRelativeAspectRatioHeight, getRelativeAspectRatioWidth } from "@parameter1/base-cms-image";
import { get, getAsObject } from "@parameter1/base-cms-object-path";

$ const element = "node__image";
$ const hasImage = Boolean(input.src);

<!--
1. If either width or height input is set, use them as the options.w and options.h
2. Using options.w and options.h, determine relative w and h when not present
3. Finally, using options, set the image width and height attrs
-->

$ const { width, height } = input;
$ const options = getAsObject(input, "options");

$ if (width || height) {
  options.w = width || undefined;
  options.h = height || undefined;
}
$ if (input.ar) options.ar = input.ar;

$ const {
  w,
  h,
  ar,
  fit,
} = options;
$ if (w && !h) options.h = ar ? getRelativeAspectRatioHeight(w, ar) : undefined;
$ if (h && !w) options.w = ar ? getRelativeAspectRatioWidth(h, ar) : undefined;
$ if (!fit) options.fit = options.w && options.h ? "crop" : undefined;

$ const attrs = { ...input.attrs, width: options.w, height: options.h };

<if(hasImage)>
  $ const src = buildImgixUrl(input.src, options, input.defaultOptions, input.isLogo);
  $ const srcset = [`${buildImgixUrl(src, { dpr: 2 })} 2x`];
  <marko-web-img
    src=src
    srcset=srcset
    alt=input.alt
    attrs=attrs
    class=[element, input.class]
    lazyload=input.lazyload
  />
</if>
<else-if(input.usePlaceholder)>
  <div
    ...attrs
    class=[element, `${element}--placeholder`, input.class]
  />
</else-if>
